<?php /* phpcs:ignore */

if ( defined( 'ABSPATH' ) && ! class_exists( 'WJECF_Pro_Limit_Discount_Quantities' ) ) {

	/**
	 * This plugin allows you to limit discount to only certain products in the cart or order.
	 */
	class WJECF_Pro_Limit_Discount_Quantities extends Abstract_WJECF_Plugin {

		/**
		 * Array that contains the max amount of items discounted per coupon and cart_item
		 * NOTE: This variable must be recalculated after every woocommerce_before_calculate_totals
		 *
		 * [ $coupon_code => [ $cart_item_key, $discount_limit ], ... ]
		 *
		 * @since 2.5.4
		 */
		private $_discount_limits = array();

		/**
		 * [ $key => [ 'function' => $callback, 'title' => $title ], ... ]
		 * NOTE: This variable is initialized in get_limit_to_options()
		 *
		 * @since 2.5.4
		 */
		private $limit_to_options = null;

		public function __construct() {
			$this->set_plugin_data(
				array(
					'description'     => __( 'Limit discount to only certain products in the cart or order.', 'woocommerce-jos-autocoupon' ),
					'dependencies'    => array(),
					'can_be_disabled' => true,
				)
			);
		}

		public function init_hook() {
			/* FRONTEND */
			if ( WJECF_WC()->check_woocommerce_version( '3.3' ) ) {
				add_filter( 'woocommerce_coupon_get_apply_quantity', array( $this, 'woocommerce_coupon_get_apply_quantity' ), 10, 4 );
			} else {
				add_filter( 'woocommerce_coupon_get_discount_amount', array( $this, 'woocommerce_coupon_get_discount_amount' ), 10, 5 );
			}
			add_action( 'woocommerce_before_calculate_totals', array( $this, 'woocommerce_before_calculate_totals' ), 10, 1 );
		}

		public function init_admin_hook() {
			add_action( 'woocommerce_coupon_options_usage_limit', array( $this, 'woocommerce_coupon_options_usage_limit' ), 10, 2 );
		}


		// =============== FRONTEND HOOKS ==================== //

		/**
		 * Reset the discount limits; enforces them to be calculated again
		 *
		 * @since 2.5.4
		 */
		public function woocommerce_before_calculate_totals( $cart ) {
			$this->_discount_limits = array();
		}

		/**
		 * Hooked to the filter woocommerce_coupon_get_apply_quantity.
		 * Will decrease discount if items are excluded.
		 *
		 * @since 2.6.0 Replaces 'woocommerce_coupon_get_discount_amount' for WC3.3+
		 * @param int $apply_quantity Amount of items on the order line the coupon will be applied to
		 * @param stdClass $item Information about the cart item (frontend) or order line (admin), see WC_Discounts
		 * @param WC_Coupon $coupon
		 * @param WC_Discounts $wc_discounts The discount calculation class
		 * @return int Adjusted $apply_quantity
		 */
		public function woocommerce_coupon_get_apply_quantity( $apply_quantity, $item, $coupon, $wc_discounts ) {

			$item_discount_limit = $this->get_item_discount_limit( $coupon, $item, $wc_discounts );

			if ( isset( $item_discount_limit ) ) {
				$apply_quantity = min( $apply_quantity, $item_discount_limit );
			}

			return $apply_quantity;
		}


		/**
		 * Hooked to the filter woocommerce_coupon_get_discount_amount.
		 * Will decrease discount if items are excluded.
		 *
		 * From WC3.3 we don't use this hook anymore, instead we hook into woocommerce_coupon_get_apply_quantity.
		 *
		 * @since 2.3.1
		 * @param float $discount
		 * @param float $discounting_amount
		 * @param array|null $cart_item
		 * @param bool $single
		 * @param WC_Coupon $coupon
		 * @return float
		 */
		public function woocommerce_coupon_get_discount_amount( $discount, $discounting_amount, $cart_item, $single, $coupon ) {

			//Cart item can be null in occasions.
			if ( ! isset( $cart_item ) ) {
				return $discount;
			}

			//Make compatible with the items as generated by WC_Discounts
			$item                     = WJECF_WC()->cart_item_to_discount_item( $cart_item );
			$cart_item_discount_limit = $this->get_item_discount_limit( $coupon, $item, null );

			if ( is_null( $cart_item_discount_limit ) ) {
				return $discount;
			}

			//Number of discounted items on this order line ()
			$cart_item_qty        = is_null( $cart_item ) ? 1 : $cart_item['quantity'];
			$original_discount_qty = $cart_item_qty;

			//FIX 2.3.3-b3: If limit_usage_to_x_items is 0 it may mean that not all items on the line were discounted
			//Using this trick we recalculate the original quantity of discounted items
			if ( $coupon->get_limit_usage_to_x_items() === 0 ) {
				if ( $coupon->is_type( array( 'percent_product', 'percent' ) ) ) {
					$expected_discount      = $coupon->get_amount() * ( $discounting_amount / 100 );
					$original_discount_qty *= 0 == $expected_discount ? 0 : $discount / $expected_discount;
				} elseif ( $coupon->is_type( 'fixed_product' ) ) {
					$expected_discount      = min( $coupon->get_amount(), $discounting_amount );
					$expected_discount      = $single ? $expected_discount : $expected_discount * $cart_item_qty;
					$original_discount_qty *= 0 == $expected_discount ? 0 : $discount / $expected_discount;
				}
				$original_discount_qty = round( $original_discount_qty, 2 ); //just in case fractions are used in cart
			}

			$discount_qty = min( $cart_item_discount_limit, $original_discount_qty );

			//Changed amount of items to apply discount to?
			if ( $discount_qty < $original_discount_qty ) {
				$discount = $discount * $discount_qty / $original_discount_qty;
				//Re-increase limit_usage_to_x_items
				if ( is_numeric( $coupon->get_limit_usage_to_x_items() ) ) {
					$coupon->set_limit_usage_to_x_items( $coupon->get_limit_usage_to_x_items() + $original_discount_qty - $discount_qty );
				}
				$discount = round( $discount, WC_ROUNDING_PRECISION );

				//$this->log( 'debug', "Limited discount of " . $cart_item['data']->get_title() . "  to: $discount_qty       $discount" );
			}

			return $discount;
		}

		// =============== 'LIMIT DISCOUNT TO' - FUNCTIONS ==================== //


		/**
		 * Get the max amount cart_items may be discounted for the given $coupon
		 * Only cart items with an actual limit applied will be in the array.
		 *
		 * Values are locally stored in _discount_limits to prevent recalculations
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param WC_Discounts|null $wc_discounts The discount calculation class
		 * @return array [ $item_key => $discount_limit ] Will return an empty array if no limits apply for the coupon
		 */
		private function get_coupon_discount_limits( $coupon, $wc_discounts = null ) {
			$coupon_code = $coupon->get_code();

			if ( ! isset( $this->_discount_limits[ $coupon_code ] ) ) {
				$this->_discount_limits[ $coupon_code ] = $this->_get_coupon_discount_limits( $coupon, $wc_discounts );
			}

			return $this->_discount_limits[ $coupon_code ];
		}

		/**
		 * Get the max amount cart_items may be discounted for the given $coupon
		 * Only cart items with an actual limit applied will be in the array.
		 *
		 * @since 2.6.0
		 * @param WC_Coupon $coupon
		 * @param WC_Discounts|null $wc_discounts The discount calculation class
		 * @return array [ $item_key => $discount_limit ] Will return an empty array if no limits apply for the coupon
		 */
		private function _get_coupon_discount_limits( $coupon, $wc_discounts = null ) {

			if ( $coupon->is_type( array( 'fixed_cart' ) ) ) {
				//Don't apply to fixed cart discounts
				return array();
			}

			$apply_to = $coupon->get_meta( '_wjecf_apply_discount_to' );
			//Skip when 'limit_to' is not set.
			if ( empty( $apply_to ) ) {
				return array();
			}

			$limit_to_options = $this->get_limit_to_options();
			//Skip when invalid discount type or missing callback function.

			//Items that can be discounted for this coupon
			$discountable_items = $this->get_discountable_items( $coupon, $wc_discounts );

			if ( isset( $limit_to_options[ $apply_to ]['function'] ) ) {
				$callback        = $limit_to_options[ $apply_to ]['function'];
				$discount_limits = call_user_func( $callback, $coupon, $discountable_items );
			} elseif ( isset( $limit_to_options[ $apply_to ]['callback'] ) ) {
				$this->log( 'warning', '\'callback\' for \'' . $apply_to . '\' in filter \'wjecf_get_limit_to_options\' is deprecated since 2.6.0. Use \'function\' instead. Please note that function parameter $discountable_cart_items has been replaced by $discountable_items as generated by WC_Discounts.' );
				$callback        = $limit_to_options[ $apply_to ]['callback'];
				$discount_limits = call_user_func( array( $this, 'wrap_legacy_callback' ), $callback, $coupon, $discountable_items, $apply_to );
			} else {
				$this->log( 'warning', 'WARNING: Unknown value for _wjecf_apply_discount_to: ' . $apply_to );
				$discount_limits = call_user_func( array( $this, 'limit_to_none' ), $coupon, $discountable_items );
			}

			if ( ! empty( $discount_limits ) ) {
				$this->log( 'debug', "Discount limits for {$apply_to}: " . print_r( $discount_limits, true ) );
			}
			return $discount_limits;
		}

		/**
		 * Get the max discount quantity of the cart item for the given coupon
		 *
		 * @since 2.6.0
		 * @param WC_Coupon $coupon
		 * @param stdClass $item Information about the cart item (frontend) or order line (admin), see WC_Discounts
		 * @param WC_Discounts|null $wc_discounts The discount calculation class
		 * @return int|null Returns an int if the amount of discounted items should be limited to a maximum value. Returns null if the amount should not be limited.
		 */
		private function get_item_discount_limit( $coupon, $item, $wc_discounts = null ) {
			$coupon_discount_limits = $this->get_coupon_discount_limits( $coupon, $wc_discounts );
			if ( ! isset( $coupon_discount_limits[ $item->key ] ) ) {
				return null;
			}
			$discount_limit = $coupon_discount_limits[ $item->key ];
			$this->log( 'debug', "Limiting discount of {$item->key} to {$discount_limit}" );
			return $discount_limit;
		}


		/**
		 * Get all matching cart items (for product discount) or all cart items (for cart discount)
		 *
		 * @param WC_Coupon $coupon
		 * @param WC_Discounts|null $wc_discounts The discount calculation class
		 * @return array [ 'cart_item_key' => cart_item, ... ]
		 */
		private function get_discountable_items( $coupon, $wc_discounts ) {
			$items = WJECF_WC()->get_discount_items( $wc_discounts );

			if ( $coupon->is_type( WJECF_WC()->wc_get_cart_coupon_types() ) ) {
				return $items; // return all if it's a cart discount
			}

			//discountable_items: Either the matching cart items (product discount) or all cart items (cart discount)
			$discountable_items = array();

			foreach ( $items as $item_key => $item ) {
				if ( WJECF()->coupon_is_valid_for_product( $coupon, $item->product, $item->object ) ) {
					$discountable_items[ $item_key ] = $item;
				}
			}

			return $discountable_items;
		}

		/**
		 * Get an array with all the 'limit to'-options including title and callback.
		 *
		 * @since 2.5.4
		 * @return [ $key => [ 'function' => $callback, 'title' => $title ], ... ]
		 */
		private function get_limit_to_options() {
			if ( is_null( $this->limit_to_options ) ) {
				$options = array(
					'all'              => array(
						'title'    => __( '(default)', 'woocommerce-jos-autocoupon' ),
						'function' => array( $this, 'limit_to_all' ),
					),
					'one_per_line'     => array(
						'title'    => __( 'One item per order line', 'woocommerce-jos-autocoupon' ),
						'function' => array( $this, 'limit_to_one_per_line' ),
					),
					'cheapest_product' => array(
						'title'    => __( 'Lowest priced product (single item)', 'woocommerce-jos-autocoupon' ),
						'function' => array( $this, 'limit_to_cheapest_product' ),
					),
					'cheapest_line'    => array(
						'title'    => __( 'Lowest priced order line (all items)', 'woocommerce-jos-autocoupon' ),
						'function' => array( $this, 'limit_to_cheapest_line' ),
					),
					'every_nth_item'   => array(
						'title'    => __( 'Every nth item. n = min qty of matching products (or 2 if not supplied)', 'woocommerce-jos-autocoupon' ),
						'function' => array( $this, 'limit_to_every_nth_item' ),
					),
					'n_cheapest_items' => array(
						'title'    => __( 'n Lowest priced products. n = the amount of times the coupon applies', 'woocommerce-jos-autocoupon' ),
						'function' => array( $this, 'limit_to_n_cheapest_items' ),
					),
				);

				/**
				 * This filter allows developers to append custom rules for 'Limit to:'
				 *
				 * $options = [ $key => [ 'function' => $callback_function, 'title' => $title ], ... ]
				 *
				 * $key = The key that identifies the 'Limit to'-rule.
				 * $title = The title of the 'Limit to'-rule.
				 * $function = The callback with functionality of the rule. Callback must have this signature:
				 *
				 * function callback_function( $coupon, $discountable_items )
				 *
				 * ($discountable_items are stdClass objects as generated by WC_Discounts)
				 *
				 * The callback must return an array with the maximum amount of items to be discounted.  [ $item_key => $discount_limit, ... ]
				 * Discount-quantity of cart_items that are not in the array will not be limited.
				 */
				$this->limit_to_options = apply_filters( 'wjecf_get_limit_to_options', $options );
			}
			return $this->limit_to_options;
		}


		// =============== 'LIMIT DISCOUNT TO' - CALLBACKS ==================== //

		/**
		 * Wrapper for the legacy 'callback' which was replaced by 'function' in WJECF 2.6.0 for WC3.3+ cart / order compatibility
		 *
		 * @since 2.6.0
		 * @param callable $callback
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @param string $apply_to The name of the limit discount rule (_wjecf_apply_discount_to)
		 * @return callable The wrapped callback
		 */
		public function wrap_legacy_callback( $callback, $coupon, $discountable_items, $apply_to ) {
			$discountable_cart_items = array();
			foreach ( $discountable_items as $item_key => $item ) {
				//We expect an array here for cart discounts. In case of order discount, we skip the legacy discount limits.
				if ( ! is_array( $item->object ) ) {
					$this->log( 'warning', "Legacy callback '$apply_to' can't be applied to orders." );
					return array();
				}
				$discountable_cart_items[ $item_key ] = $item->object;
			}
			return call_user_func( $callback, $coupon, $discountable_cart_items );
		}

		/**
		 * Fallback for invalid value of '_wjecf_apply_discount_to'.
		 * Will set all discounts to 0. (We prefer to do this instead of applying full discount when '_wjecf_apply_discount_to' has an invalid value)
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_none( $coupon, $discountable_items ) {
			$limits = array();
			foreach ( $discountable_items as $item_key => $item ) {
				$limits[ $item_key ] = 0;
			}
			return $limits;
		}

		/**
		 * Callback for: '(default)'
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_all( $coupon, $discountable_items ) {
			return array();
		}

		/**
		 * Callback for: 'One item per order line'
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_one_per_line( $coupon, $discountable_items ) {
			$limits = array();
			foreach ( $discountable_items as $item_key => $item ) {
				if ( $item->quantity > 1 ) {
					$limits[ $item_key ] = 1;
				}
			}
			return $limits;
		}

		/**
		 * Callback for: 'Lowest priced product (single item)'
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_cheapest_product( $coupon, $discountable_items ) {
			uasort( $discountable_items, array( $this, 'sort_by_product_price' ) );
			$cheapest_item = reset( $discountable_items );

			$limits = array();
			foreach ( $discountable_items as $item_key => $item ) {
				$limits[ $item_key ] = ( $item === $cheapest_item ) ? 1 : 0;
			}
			return $limits;
		}

		/**
		 * Callback for: 'Lowest priced order line (all items)'
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_cheapest_line( $coupon, $discountable_items ) {
			uasort( $discountable_items, array( $this, 'sort_by_line_price' ) );
			$cheapest_item = reset( $discountable_items );

			$limits = array();
			foreach ( $discountable_items as $item_key => $item ) {
				if ( $item !== $cheapest_item ) {
					//Not the cheapest item. Don't discount it!
					$limits[ $item_key ] = 0;
				}
			}
			return $limits;
		}

		/**
		 * Callback for: 'Every nth item. n = min qty of matching products (or 2 if not supplied)'
		 *
		 * @since 2.5.4
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_every_nth_item( $coupon, $discountable_items ) {
			//nth is the amount entered in 'minimum qty of matching products' or 2
			$nth = intval( $coupon->get_meta( '_wjecf_min_matching_product_qty' ) );
			if ( empty( $nth ) ) {
				$nth = 2; //default to every second item
			}

			//Discountable items; expensive to cheap
			uasort( $discountable_items, array( $this, 'sort_by_product_price' ) );
			$discountable_items = array_reverse( $discountable_items, true );

			$limits = array();

			//Remainder from previous item(s)
			$remainder = 0;
			foreach ( $discountable_items as $item_key => $item ) {
				$limits[ $item_key ] = floor( ( $item->quantity + $remainder ) / $nth );
				$remainder           = ( $item->quantity + $remainder ) % $nth;
			}

			return $limits;
		}

		/**
		 * Callback for: 'n Lowest priced items. n = the amount of times the coupon applies
		 *
		 * @since 3.1.5
		 * @param WC_Coupon $coupon
		 * @param array The cart items / order lines to which the coupon applies
		 * @return array
		 */
		public function limit_to_n_cheapest_items( $coupon, $discountable_items ) {
			$n =  WJECF()->get_coupon_multiplier_value( $coupon );

			//Discountable items; expensive to cheap
			uasort( $discountable_items, array( $this, 'sort_by_product_price' ) );

			$limits = array();

			foreach ( $discountable_items as $item_key => $item ) {
				$limits[ $item_key ] = min( $n, $item->quantity );
				$n -= $limits[ $item_key ];
			}

			return $limits;
		}


		/**
		 * Use with uasort() to sort an array of cart_items by the single product price
		 * @param stdClass $item_a
		 * @param stdClass $item_b
		 * @return int
		 */
		private function sort_by_product_price( $item_a, $item_b ) {
			$price_a = $item_a->product->get_price();
			$price_b = $item_b->product->get_price();
			if ( $price_a == $price_b ) {
				return 0;
			}
			return ( $price_a < $price_b ) ? -1 : 1;
		}

		/**
		 * Use with uasort() to sort an array of cart_items by the line subtotal
		 * @param stdClass $item_a
		 * @param stdClass $item_b
		 * @return int
		 */
		private function sort_by_line_price( $item_a, $item_b ) {
			if ( $item_a->price == $item_b->price ) {
				return 0;
			}
			return ( $item_a->price < $item_b->price ) ? -1 : 1;
		}


		// =============== ADMIN ==================== //

		/**
		 * Render coupon options
		 *
		 * @since 2.3.3-b3
		 * @return void
		 */
		public function woocommerce_coupon_options_usage_limit() {
			global $thepostid, $post;
			$thepostid = empty( $thepostid ) ? $post->ID : $thepostid;

			echo '<div class="options_group wjecf_hide_on_fixed_cart_discount">';
			echo '<h3>' . __( 'Limit discount to', 'woocommerce-jos-autocoupon' ) . '</h3>';
			echo '<p>' . __( 'Here you can exclude certain products from being discounted (Only applies to Cart % Discount, Product Discount, Product % Discount)', 'woocommerce-jos-autocoupon' ) . '</p>';

			$select_options = array_map(
				function ( $item ) {
					return $item['title'];
				},
				$this->get_limit_to_options()
			);

			//2.3.1
			woocommerce_wp_select(
				array(
					'id'          => '_wjecf_apply_discount_to',
					'label'       => __( 'Limit discount to', 'woocommerce' ),
					'options'     => $select_options,
					'description' => __( 'Please note that when the discount type is \'Product discount\' (see \'General\'-tab), the discount will only be applied to <em>matching</em> products.', 'woocommerce-jos-autocoupon' ),
					'desc_tip'    => true,
				)
			);

			echo '</div>';
		}

		public function admin_coupon_meta_fields( $coupon ) {
			return array(
				//2.3.1
				'_wjecf_apply_discount_to' => 'clean',
			);
		}
	}
}
